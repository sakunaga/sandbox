#!/bin/bash

function error() {
    echo -e "$1"
    usage
    exit 1
}

function mg_init() {
    echo -e "\033[1;32msandbox init\033[0;39m を実行して初期設定を行ってください。"
}

function mg_reset() {
    echo -e "\033[1;32msandbox reset\033[0;39m を実行して設定をリセットしてください。"
}

function er_init() {
    read -p "初期設定を行いますか？ [Y/n]: " answer
    case $answer in
        "" | "Y" | "y" | "yes" | "Yes" | "YES" ) ;;
        * ) mg_init;;
    esac
    init
    exit 1
}

function usage() {
    echo -e "使用方法:"
    echo -e "    \033[1;32msandbox\033[0;39m            ... プロジェクトを開く (省略形)"
    echo -e "    \033[1;32msandbox init\033[0;39m       ... 初期設定"
    echo -e "    \033[1;32msandbox update\033[0;39m     ... 設定を更新する"
    echo -e "    \033[1;32msandbox open\033[0;39m       ... プロジェクトを開く"
    echo -e "    \033[1;32msandbox info\033[0;39m       ... 設定情報を確認する"
    echo -e "    \033[1;32msandbox reset\033[0;39m      ... 設定をリセットする"
    echo -e "    \033[1;32msandbox upgrade\033[0;39m    ... 本体を更新する"
    echo -e "    \033[1;32msandbox uninstall\033[0;39m  ... 本体を削除する"
}

function info() {
    if [ ! -e ./sandbox.conf ]; then
        mg_init; er_init;
    fi

    source ./sandbox.conf

    if [ -n "$created" ]; then
        echo -e "作成時間: \033[1;32m$created\033[0;39m"
    fi
    if [ -n "$updated" ]; then
        echo -e "最終更新時間: \033[1;32m$updated\033[0;39m"
    fi
    echo -e "プロジェクトディレクトリ: \033[1;32m$dir\033[0;39m"
}


function init() {
    if [ -e ./sandbox.conf ]; then
        mg_reset
        exit 1
    fi
    read -p "プロジェクトディレクトリ: " dir
    expanded_dir="${dir/#\~/$HOME}"
    if [ ! -e "$expanded_dir" ]; then
        mkdir -p "$expanded_dir"
        echo -e "ディレクトリ「\033[1;32m$dir\033[0;39m」 を作成しました。"
    else
        echo -e "\033[1;32m$dir\033[0;39m は既に存在しています。"
    fi
    echo "created='$(date)'" > ./sandbox.conf
    echo "dir='${dir}'" >> ./sandbox.conf
    echo -e "\033[1;34m初期設定が完了しました。\033[0;39m"
}

function update() {
    if [ ! -e ./sandbox.conf ]; then
        mg_init; er_init;
    fi

    read -p "設定をアップデートしますか？ [Y/n]: " answer
    case $answer in
        "" | "Y" | "y" | "yes" | "Yes" | "YES" ) ;;
        * ) exit 1;;
    esac

    # 既存の設定ファイルを読み込む
    source ./sandbox.conf

    echo -e "現在のプロジェクトディレクトリ: \033[1;32m$dir\033[0;39m"
    read -p "新しいプロジェクトディレクトリ: " dir
    expanded_dir="${dir/#\~/$HOME}"

    if [ ! -e "$expanded_dir" ]; then
        mkdir -p "$expanded_dir"
        echo -e "ディレクトリ「\033[1;32m'$dir'\033[0;39m 」を作成しました。"
    else
        echo -e "\033[1;32m$dir\033[0;39m は既に存在しています。"
    fi

    # 設定ファイルの更新。createdは既存のものを保持しつつ、dirとupdatedを上書き
    if [ -n "$created" ]; then
        echo "created='${created}'" > ./sandbox.conf
    fi
    echo "updated='$(date)'" >> ./sandbox.conf
    echo "dir='${dir}'" >> ./sandbox.conf

    echo -e "\033[1;34m設定のアップデートが完了しました。\033[0;39m"
}





function open() {
    if [ ! -e ./sandbox.conf ]; then
        mg_init; er_init;
    fi
    source ./sandbox.conf
    expanded_dir="${dir/#\~/$HOME}"
    cd "$expanded_dir"
    
    folders=($(find . -maxdepth 1 -type d | sort | sed '1d; s|^\./||'))


    if [ ${#folders[@]} -eq 0 ]; then
        error "プロジェクトが存在しません。"
    fi


    echo "プロジェクトを選択してください: "
    for i in "${!folders[@]}"; do
        echo " $((i+1))) ${folders[i]}"
    done


    read -p "番号を入力: " choice


    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#folders[@]}" ]; then
        selected_folder="${folders[$((choice-1))]}"
        
        code "$selected_folder"
        echo -e "\033[1;32mプロジェクト $selected_folder をVSCodeで開きました。\033[0;39m"
    else
        error "無効な選択です。"
    fi
}

function reset() {
    if [ ! -e ./sandbox.conf ]; then
        mg_init; er_init;
    fi
    read -p "設定をリセットしますか？ [Y/n]: " answer
    case $answer in
        "" | "Y" | "y" | "yes" | "Yes" | "YES" ) ;;
        * ) exit 1;;
    esac
    rm -f ./sandbox.conf
    echo -e "\033[1;34mリセットが完了しました。\033[0;39m"
}

function upgrade() {
    echo -e "🍺 \033[1;32mbrew upgrade sandbox\033[0;39m を実行しています。"
    brew upgrade sandbox
    echo -e "🍺 \033[1;32mbrew upgrade sandbox\033[0;39m の実行が終了しました。"
}

function uninstall() {
    read -p "本体をHomebrewを使用してアンインストールしますか？ [Y/n]: " answer01
    case $answer01 in
        "" | "Y" | "y" | "yes" | "Yes" | "YES" ) ;;
        * ) exit 1;;
    esac
    read -p "untapしますか？ [Y/n]: " answer02
    case $answer02 in
        "" | "Y" | "y" | "yes" | "Yes" | "YES" ) ;;
        * ) rm -f ./sandbox.conf; brew uninstall sandbox; echo -e "👋 \033[1;34msandbox\033[0;39m を削除しました。"; exit 1;;
    esac
    rm -f ./sandbox.conf
    brew uninstall sandbox
    brew untap sakunaga/sandbox
    echo -e "👋 \033[1;34msandbox\033[0;39m のご利用ありがとうございました！"
}

cd `dirname $0`
case $1 in
    -h ) usage ;;
    info ) info ;;
    init ) init ;;
    update ) update ;;
    open ) open ;;
    reset ) reset ;;
    upgrade ) upgrade ;;
    uninstall ) uninstall ;;
    * ) open ;;
esac
